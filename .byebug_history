exit
output
(output.to_s).join" "
output
output.to_s
output.to_a
output
exit
output
exit
output
ouput
c
output
c
output
exit
output
exit
output
exit
output*","
output*
output.to_i
output
n
c
exit
output = (max_numbers.calculated_list.join",")
output = (max_numbers.calculated_list.join",").join"#{to_i}"
output = (max_numbers.calculated_list.join",")
output = (max_numbers.calculated_list.join",").join
exit
output.join()
output.to_i
output
c
output
exit
output
c
exit
Prime.prime?(numbers)
numbers
c
numbers
Prime.prime?(numbers)
c
Prime.prime?(numbers)
Prime.class
Prime
exit
is_prime?(7)
is_prime?(numbers)
numbers
c
is_prime?(numbers)
c
is_prime?(numbers)
exit
is_prime?(numbers)
numbers
@numbers_prime
exit
numbers
c
is_prime?(numbers)
numbers
c
is_prime?(numbers)
numbers
exit
@numbers_prime
exit
max_numbers.calculated_list
output
coutput
c
number
c
number
c
number
c
number
c
number
numer
@max_numbers
c
@max_numbers % number
number
@max_numbers
exit
number
n
exit
n
@max_numbers
n
exit
 (2..(@max_numbers - 1))
exit
number
@max_numbers
 (1..(@max_numbers))
 (1..(@max_numbers - 1))
exit
(2..(@max_numbers - 1))
(2..(@numbers_prime - 1))
@numbers_prime
exit
max_numbers.calculated_list
output
c
output
exit
output.to_i
output
exit
max_numbers.calculated_list*""
max_numbers.calculated_list*"".to_i
max_numbers.calculated_list*""
max_numbers.calculated_list*
max_numbers.calculated_list
output
exit
output
c
exit
@numbers_prime
c
@max_numbers
array
exit
@max_numbers
c
array
exit
c
@max_numbers
c
@max_numbers
c
@max_numbers
c
@max_numbers
c
@max_numbers
c
@max_numbers
c
@max_numbers % number
@max_numbers
number
numbers
exit
is_prime?(numbers) if puts "ok"
is_prime?(numbers)
numbers
exit
is_prime?(7)
is_prime?(8)
is_prime?(5)
is_prime?(3)
array
n
array
exit
is_prime?(4)
is_prime?(3)
is_prime?(2)
is_prime?(numbers)
numbers
exit
numbers
 (array.select { |numbers| is_prime?(numbers) }*" ").to_i
array
exit
(array.select { |numbers| is_prime?(numbers) }*" ").to_i
  array.select { |numbers| is_prime?(numbers) }*" "
  array.select { |numbers| is_prime?(numbers) }*
  array.select { |numbers| is_prime?(numbers) }*" "
array.select { |numbers| is_prime?(numbers) }
array = 2.step(@max_numbers).to_a
exit
array = 2.step(@max_numbers).to_a
array = 1.step(@max_numbers - 1).to_a
exit
array.select { |numbers| is_prime?(numbers) }
@array.select { |numbers| is_prime?(numbers) }
is_prime?(array.first)
  @max_numbers.select { |numbers| is_prime?(numbers) }
exit
is_prime?(2)
array.first.is_prime?
array.first
@max_numbers.select { |numbers| numbers.is_prime? }
array = 1.step(@max_numbers).to_a
exit
if is_prime?(2) puts "ok"
if is_prime?(2) true puts ok
is_prime?(2)
exit
is_prime?(2)
is_prime?(2
exit
@max_numbers % number == 0
 return false if @max_numbers % number == 0
puts number if false
number
exit
n
exit
n
c
exit
n
is_prime?
exit
is_prime?
is_prime?(2)
is_prime?(@max_numbers)
exit
n
exit
pexit
max_numbers << p
c
max_numbers << p
prime
max_numbers
exit
prime
exit
prime << p
prime
c
prime << p
prime = []
prime
exit
prime
c
prime
c
exit
hash
exit
numbers_first
c
numbers_first
exit
numbers_first.concat(numbers)
numbers_first.concact(numbers)
numbers_first
