exit
numbers_first
exit
numbers_first
exit
@numbers_first
c
numbers_first
c
exit
numbers
(numbers / 2)
(numbers / 2) != 0
(numbers / 2).is_a?(Integer) &&(numbers / 2) != 0
exit
 (numbers / 2).is_a?(Integer) && numbers != 0
exit
(numbers / 2)
numbers != 0
numbers
(numbers / 2).is_a?(Integer) || numbers != 0
exit
(numbers / 2)
(numbers / 2).is_a?(Integer)
numbers
numberss
exit
numbers
@number_first
c
@number_first
exit
numbers / 2
numbers
c
numbers
exit
@number_first
exit
numbers
exit
hash
exit
numbers.is_a?(Integer)
numbers == Integer
numbers != Integer
numbers
numbers != (Integer)
numbers == (Integer)
numbers.is_a?(Integer)
numbers
a.is_a?
a
&
a = 1
numbers
numbers.is_a?
exit
numbers.is_a?
numbers
exit
hash
exit
hash.keys
hash
exit
(1..@list_numbers).each { |numbers| hash[numbers] = 'free' }
(1..@list_numbers).each { |numbers| hash[numbers] = 'free' 
list
exit
(1...@list_numbers).collect { |number| array.push }
(1..@list_numbers).collect { |number| array.push }
(1..@list_numbers).collect { |number| array.push(number) }
(1..@list_numbers).each { |number| array.push }
(1..@list_numbers).each { |number| array.push(number) }
(1...@list_numbers).map { |number| array.push }
(0..@list_numbers).map { |number| array.push }
(0...@list_numbers).map { |number| array.push }
(1...@list_numbers).map { |number| array.push }
(1..@list_numbers).map { |number| array.push }
(1..@list_numbers).map
(1..@list_numbers).map { |number| array.push(number) }
exit
 (1..@list_numbers).each { |number| array.push(number) }
exit
 (1..@list_numbers).each { |numbers| [numbers] }
exit
hash
exit
hash
exit
 (1..@list_numbers).each { |numbers| list[numbers] = 'coucou' }
list
exit
(1..@list_numbers).each { |numbers| list[numbers] = '' }
list
exit
list
lsit
list
exit
hash
exit
@list_numbers
exit
@list_numbers
exit
@list_numbers
exit
@list_numbers
exit
@list_numbers
@ list_numbers
puts list_numbers
exit
list_numers
exit
list_numbers
exit
